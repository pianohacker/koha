<div id="editor-widget-templates" style="display:none">
    <div id="widget-leader">
        Leader:&nbsp;<span title="Record length (autogenerated)">#####</span>
        <select name="f5">
            <option value="a">a - Increase in encoding level</option>
            <option value="c">c - Corrected or revised</option>
            <option value="d">d - Deleted</option>
            <option value="n">n - New</option>
            <option value="p">p - Increase in encoding level from prepublication</option>
        </select>
        <select name="f6">
            <option value="a">a - Language material</option>
            <option value="c">c - Notated music</option>
            <option value="d">d - Manuscript notated music</option>
            <option value="e">e - Cartographic material</option>
            <option value="f">f - Manuscript cartographic material</option>
            <option value="g">g - Projected medium</option>
            <option value="i">i - Nonmusical sound recording</option>
            <option value="j">j - Musical sound recording</option>
            <option value="k">k - Two-dimensional nonprojectable graphic</option>
            <option value="m">m - Computer file</option>
            <option value="o">o - Kit</option>
            <option value="p">p - Mixed materials</option>
            <option value="r">r - Three-dimensional artifact or naturally occurring object</option>
            <option value="t">t - Manuscript language material</option>
        </select>
        <select name="f7">
            <option value="a">a - Monographic component part</option>
            <option value="b">b - Serial component part</option>
            <option value="c">c - Collection</option>
            <option value="d">d - Subunit</option>
            <option value="i">i - Integrating resource</option>
            <option value="m">m - Monograph/item</option>
            <option value="s">s - Serial</option>
        </select>
        <select name="f8">
                <option value=" ">_ - No specific type</option>
                <option value="a">a - Archival</option>
        </select>
        a22#####
        <select name="f17">
            <option value=" ">_ - Full level</option>
            <option value="1">1 - Full level, material not examined</option>
            <option value="2">2 - Less-than-full level, material not examined</option>
            <option value="3">3 - Abbreviated level</option>
            <option value="4">4 - Core level</option>
            <option value="5">5 - Partial (preliminary) level</option>
            <option value="7">7 - Minimal level</option>
            <option value="8">8 - Prepublication level</option>
            <option value="u">u - Unknown</option>
            <option value="z">z - Not applicable</option>
        </select>
        <select name="f18">
            <option value=" ">_ - Non-ISBD</option>
            <option value="a">a - AACR 2</option>
            <option value="c">c - ISBD punctuation omitted</option>
            <option value="i">i - ISBD punctuation included</option>
            <option value="u">u - Unknown</option>
        </select>
        <select name="f19">
            <option value=" ">_ - Not specified or not applicable</option>
            <option value="a">a - Set</option>
            <option value="b">b - Part with independent title</option>
            <option value="c">c - Part with dependent title</option>
        </select>
        4500
    </div>
</div>

<script>

/**
 * Each widget should provide one to three methods:
 *   init( text ): Returns the DOM node for this widget. Return null to hide the
 *                 subfield completely.
 *   postCreate( node, mark ): Optional, called once the mark has been created
 *                             and the node shown. Bind event handlers here.
 *   makeTemplate(): Optional, should return some sane default contents for a
 *                   newly created field/subfield. '<empty>' will be used if this
 *                   method is unset.
 *
 * Following the Koha convention, control fields are defined as tags with a
 * single subfield, '@'.
 */

var editorWidgets = {
    '000@': {
        makeTemplate: function() {
            return '     nam a22     7a 4500';
        },
        init: function() {
            var $result = $( '<span class="subfield-widget fixed-widget"></span>' );

            return $result[0];
        },
        postCreate: function() {
            // Clear the length and directory start fields; these are unnecessary for MARCXML and will be filled in upon USMARC export
            this.setFixed( 0, 5, '     ' );
            this.setFixed( 9, 17, 'a22     ' );
            this.setFixed( 20, 24, '4500' );

            var wsOnly = /^\s*$/;
            $( '#widget-leader' ).contents().clone().each( function() {
                if ( this.nodeType == Node.TEXT_NODE ) {
                    this.data = this.data.replace( /^\s+|\s+$/g, '' );
                }
            } ).appendTo( this.node );

            $( this.node ).find( '[name=f5]' )[0].value=( this.getFixed( 5, 6 ) );
            $( this.node ).find( '[name=f6]' ).val( this.getFixed( 6, 7 ) );
            $( this.node ).find( '[name=f7]' ).val( this.getFixed( 7, 8 ) );
            $( this.node ).find( '[name=f8]' ).val( this.getFixed( 8, 9 ) );
            $( this.node ).find( '[name=f17]' ).val( this.getFixed( 17, 18 ) );
            $( this.node ).find( '[name=f18]' ).val( this.getFixed( 18, 19 ) );
            $( this.node ).find( '[name=f19]' ).val( this.getFixed( 19, 20 ) );

            console.log(this.getFixed( 5, 6 ), $( this.node ).find( '[name=f5]' )[0]);
            console.log(this.getFixed( 6, 7 ), $( this.node ).find( '[name=f6]' )[0]);
            console.log(this.getFixed( 7, 8 ), $( this.node ).find( '[name=f7]' )[0]);
            console.log(this.getFixed( 8, 9 ), $( this.node ).find( '[name=f8]' )[0]);
            console.log(this.getFixed( 17, 18 ), $( this.node ).find( '[name=f17]' )[0]);
            console.log(this.getFixed( 18, 19 ), $( this.node ).find( '[name=f18]' )[0]);
            console.log(this.getFixed( 19, 20 ), $( this.node ).find( '[name=f19]' )[0]);
        },
    },
    '008@': {
        makeTemplate: function() {
            var now = new Date();
            return this.padNum( now.getYear() % 100, 2 ) + this.padNum( now.getMonth() + 1, 2 ) + this.padNum( now.getDate(), 2 ) + "b        xxu||||| |||| 00| 0 [% DefaultLanguageField008 %] d";
        },
        init: function() {
            var $result = $( '<span class="subfield-widget fixed-widget">Fixed data: </span>' );

            return $result[0];
        },
        postCreate: function( node, mark ) {
        }
    },
    '245a': {
        init: function( text ) {
            return null;
        },
    }
};

</script>
